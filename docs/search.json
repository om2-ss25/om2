[
  {
    "objectID": "template.html#table-of-contents",
    "href": "template.html#table-of-contents",
    "title": "[TITLE]",
    "section": "[TABLE OF CONTENTS]",
    "text": "[TABLE OF CONTENTS]\n\n\n\n[SECTION 1]\n\n\n\n\n[SECTION 2]\n\n\n\n\n[SECTION 3]\n\n\n\n\n[SECTION 4]\n\n\n\n\n[SECTION 5]\n\n\n\n\n[SECTION 6]"
  },
  {
    "objectID": "template.html#slide-title",
    "href": "template.html#slide-title",
    "title": "[TITLE]",
    "section": "[SLIDE TITLE]",
    "text": "[SLIDE TITLE]\n\n\n\n\n\nImage Description\n\n\n\n\n[KEY POINT 1]: [DESCRIPTION]\n\n[KEY POINT 2]: [DESCRIPTION]\n\n[KEY POINT 3]: [DESCRIPTION]\n\n[KEY POINT 4]:\n\n[SUB-POINT 1] [DESCRIPTION]\n\n[SUB-POINT 2] [DESCRIPTION]"
  },
  {
    "objectID": "template.html#slide-title-1",
    "href": "template.html#slide-title-1",
    "title": "[TITLE]",
    "section": "[SLIDE TITLE]",
    "text": "[SLIDE TITLE]\n\n[BULLET POINT 1]: [DESCRIPTION]\n\n[BULLET POINT 2]: [DESCRIPTION]\n\n[BULLET POINT 3]: [DESCRIPTION]\n\n[BULLET POINT 4]: [DESCRIPTION]"
  },
  {
    "objectID": "template.html#slide-title-2",
    "href": "template.html#slide-title-2",
    "title": "[TITLE]",
    "section": "[SLIDE TITLE]",
    "text": "[SLIDE TITLE]\n\n\n\n\n\nImage Description\n\n\n\n\n[KEY POINT 1]: [DESCRIPTION]\n[KEY POINT 2]: [DESCRIPTION]\n[KEY POINT 3]: [DESCRIPTION]\n\n\n\n\n\n\n[WARNING MESSAGE]\n\n\n\n\n\n\n\n\n[TIP MESSAGE]"
  },
  {
    "objectID": "template.html#slide-title-3",
    "href": "template.html#slide-title-3",
    "title": "[TITLE]",
    "section": "[SLIDE TITLE]",
    "text": "[SLIDE TITLE]\n\n\n\n\n\nImage Description\n\n\n\n\n[KEY POINT 1]: [DESCRIPTION]\n[KEY POINT 2]: [DESCRIPTION]\n[KEY POINT 3]: [DESCRIPTION]"
  },
  {
    "objectID": "template.html#slide-title-with-animation-or-media",
    "href": "template.html#slide-title-with-animation-or-media",
    "title": "[TITLE]",
    "section": "[SLIDE TITLE WITH ANIMATION OR MEDIA]",
    "text": "[SLIDE TITLE WITH ANIMATION OR MEDIA]"
  },
  {
    "objectID": "template.html#slide-title-4",
    "href": "template.html#slide-title-4",
    "title": "[TITLE]",
    "section": "[SLIDE TITLE]",
    "text": "[SLIDE TITLE]\n\n\n\n\n\nImage Description\n\n\n\n\n[KEY POINT 1]: [DESCRIPTION]\n[KEY POINT 2]: [DESCRIPTION]\n[KEY POINT 3]: [DESCRIPTION]"
  },
  {
    "objectID": "template.html#slide-title-5",
    "href": "template.html#slide-title-5",
    "title": "[TITLE]",
    "section": "[SLIDE TITLE]",
    "text": "[SLIDE TITLE]\n\n\n\n\n\nImage Description\n\n\n\n\n[CONTENT]\n[IMPORTANT NOTE]\n\n\n\n\n\n\n[TIP MESSAGE]"
  },
  {
    "objectID": "template.html#slide-title-6",
    "href": "template.html#slide-title-6",
    "title": "[TITLE]",
    "section": "[SLIDE TITLE]",
    "text": "[SLIDE TITLE]\n\n\n\n\n\nImage Description\n\n\n\n\n[KEY POINT 1]: [DESCRIPTION]\n[KEY POINT 2]: [DESCRIPTION]"
  },
  {
    "objectID": "template.html#slide-title-with-animation-or-media-1",
    "href": "template.html#slide-title-with-animation-or-media-1",
    "title": "[TITLE]",
    "section": "[SLIDE TITLE WITH ANIMATION OR MEDIA]",
    "text": "[SLIDE TITLE WITH ANIMATION OR MEDIA]"
  },
  {
    "objectID": "template.html#slide-title-7",
    "href": "template.html#slide-title-7",
    "title": "[TITLE]",
    "section": "[SLIDE TITLE]",
    "text": "[SLIDE TITLE]\n\n\n\n\n\nImage Description\n\n\n\n\n[KEY POINT 1]: [DESCRIPTION]\n[KEY POINT 2]: [DESCRIPTION]\n[KEY POINT 3]: [DESCRIPTION]"
  },
  {
    "objectID": "template.html#video-title",
    "href": "template.html#video-title",
    "title": "[TITLE]",
    "section": "[VIDEO TITLE]",
    "text": "[VIDEO TITLE]"
  },
  {
    "objectID": "template.html#catalog-title",
    "href": "template.html#catalog-title",
    "title": "[TITLE]",
    "section": "[CATALOG TITLE]",
    "text": "[CATALOG TITLE]\n\nüîó Link Title"
  },
  {
    "objectID": "semester.html",
    "href": "semester.html",
    "title": "Weekly overview",
    "section": "",
    "text": "Welcome to this guide on setting up your Python development environment using the powerful package manager called uv.\nA properly configured development environment is crucial for efficient coding. It helps manage dependencies, keeps your projects organized, and provides powerful tools that make coding easier and more enjoyable. The uv package manager we‚Äôll be using is a modern, fast alternative to traditional Python package managers.\n\n\nThe GitHub Student Developer Pack provides students with free access to the best developer tools.\n\nVisit GitHub Student Developer Pack\nClick on ‚ÄúGet your pack‚Äù\nSign in with your GitHub account (or create one if you don‚Äôt have it)\nVerify your student status using your school-issued email\nComplete the application form\nWait for approval (usually takes 1-7 days)\n\nWhy this matters: The pack includes free access to GitHub Copilot, which is an AI pair programmer that will help you write better code faster.\n\n\n\nVS Code is a lightweight but powerful source code editor.\n\nGo to VS Code download page\nDownload the appropriate version for your operating system\nRun the installer and follow the on-screen instructions\nLaunch VS Code after installation\n\n\n\n\n\n\n\nPro Tip for Microsoft\n\n\n\n\n\nDuring installation on Windows, check the options ‚ÄúAdd ‚ÄòOpen with Code‚Äô action to Windows Explorer file context menu‚Äù and ‚ÄúAdd ‚ÄòOpen with Code‚Äô action to Windows Explorer directory context menu‚Äù for easier access.\n\n\n\nAdding VS Code to PATH (Command Line Access)\nTo be able to open VS Code from the command line interface using code . command:\nFor Windows: 1. Open VS Code 2. Press Ctrl+Shift+P to open the Command Palette 3. Type ‚Äúshell command‚Äù and select ‚ÄúShell Command: Install ‚Äòcode‚Äô command in PATH‚Äù 4. Restart your terminal for changes to take effect\nFor macOS: 1. Open VS Code 2. Press Cmd+Shift+P to open the Command Palette 3. Type ‚Äúshell command‚Äù and select ‚ÄúShell Command: Install ‚Äòcode‚Äô command in PATH‚Äù 4. Restart your terminal for changes to take effect\n\n\n\nExtensions enhance VS Code with additional features. We‚Äôll install three key extensions.\nIn VS Code, click on the Extensions icon in the sidebar (or press: Windows Ctrl+Shift+X / mac: Cmd+Shift+X).\nPython Extension\n\nSearch for ‚ÄúPython‚Äù\nFind the extension by Microsoft (usually the first result)\nClick ‚ÄúInstall‚Äù\n\nGitHub Copilot\n1. Search for ‚ÄúGitHub Copilot‚Äù in the Extensions marketplace 2. Click ‚ÄúInstall‚Äù 3. After installation, sign in with your GitHub account using the account icon in the lower left sidebar 4. You‚Äôll be prompted to authorize VS Code to use GitHub Copilot\nGitHub Copilot Chat\n1. Search for ‚ÄúGitHub Copilot Chat‚Äù in the Extensions marketplace 2. Click ‚ÄúInstall‚Äù 3. This extension works alongside GitHub Copilot to provide conversational AI assistance\n\n\n\n\n\n\nNote: GitHub Copilot requires a subscription, but it‚Äôs free with the GitHub Student Developer Pack you applied for in Step 1.\n\n\n\n\n\n\nuv is a fast, modern Python package manager and resolver.\nFor Windows (PowerShell):\n\nOpen PowerShell\nRun the following command:\n\npowershell -ExecutionPolicy ByPass -c \"irm https://astral.sh/uv/install.ps1 | iex\"\n\nRestart your PowerShell session to ensure uv is in your PATH\n\nFor macOS/Linux (Terminal):*\n\nOpen Terminal\nRun the following command:\n\ncurl -LsSf https://astral.sh/uv/install.sh | sh\nIf your system doesn‚Äôt have curl, you can use wget:\nwget -qO- https://astral.sh/uv/install.sh | sh\n\nClose and reopen your terminal to ensure uv is in your PATH\n\nVerify installation: Type uv --version in your command line interface. You should see the version number of uv displayed.\n\n\n\nNow let‚Äôs create a new Python project structure using uv:\n\nOpen your command line interface (PowerShell on Windows or Terminal on Mac/Linux)\nSimply type the following command directly in your command line or first navigate to the directory where you want to create your project (e.g., cd Documents)\nRun the following command to initialize a new project named ‚Äúgenai-app‚Äù with Python 3.11:\n\nuv init genai-app --python 3.11\n\n\n\n\n\n\nWhat this does\n\n\n\n\n\n\nCreates a new directory called genai-app\nSets up a project structure with Python 3.11\nCreates initial configuration files\n\n\n\n\n\n\n\nLet‚Äôs move into your newly created project directory:\ncd genai-app\nCheck the directory contents: You can use dir (Windows) or ls (macOS/Linux) to see what files were created.\n\n\n\nA virtual environment is an isolated space where you can install packages without affecting your global Python installation. We can create and activate this environment with:\nuv sync\n\n\n\n\n\n\nWhat this does\n\n\n\n\n\n\nCreates a virtual environment for your project\nSets up the environment based on your project‚Äôs specifications\nThis environment is isolated from your system Python installation\n\n\n\n\nLet‚Äôs execute the example Python file main.py to make sure everything is working:\npython3 main.py\nYou should see a ‚ÄúHello, world‚Äù message.\n\n\n\nLet‚Äôs add some commonly used packages for AI and data science projects:\nuv add pandas python-dotenv openai gradio streamlit\n\n\n\n\n\n\nWhat these packages do\n\n\n\n\n\n\npandas: A beginner-friendly library that helps you work with data tables (like Excel spreadsheets)\npython-dotenv: Helps keep your passwords and API keys safe by storing them in a separate file\nopenai: Connects your code to AI services like ChatGPT\ngradio: Creates simple web interfaces for your AI projects with minimal coding\nstreamlit: Turns your Python scripts into interactive web apps with just a few lines of code\n\n\n\n\n\n\n\nNow let‚Äôs open your new project in VS Code where we‚Äôll write our code:\ncode .\nThis command tells your computer to open VS Code in your current folder (the . means ‚Äúhere‚Äù).\nIf this command doesn‚Äôt work, don‚Äôt worry! You can also: 1. Open VS Code manually 2. Click on ‚ÄúFile‚Äù in the top menu 3. Select ‚ÄúOpen Folder‚Ä¶‚Äù 4. Find and select your genai-app folder\n\n\n\nLet‚Äôs make sure everything is working by running the example file:\npython3 main.py\nYou should see a ‚ÄúHello, world!‚Äù message appear. This confirms that: 1. Your Python is working correctly 2. Your virtual environment is active 3. You‚Äôre ready to start coding!\n\n\n\nPackage Installation Problems\nIf you see errors when adding packages: 1. Check that you‚Äôre connected to the internet 2. Try running uv sync again to refresh your environment 3. Read the error message carefully - it often tells you exactly what went wrong\n‚ÄúCommand Not Found‚Äù Error\nIf your computer can‚Äôt find the uv command: 1. Close your terminal completely and open a new one 2. If that doesn‚Äôt work, you might need to add uv to your PATH (the list of places your computer looks for programs) 3. As a last resort, try reinstalling using the commands from Step 4\nVS Code Extensions Not Working\nIf the extensions we installed aren‚Äôt behaving correctly: 1. Make sure you‚Äôve signed in to your GitHub account in VS Code 2. Try updating VS Code to the latest version 3. You can reinstall extensions by uninstalling them first, then installing again\n\n\n\n\nuv Documentation\nVS Code Python Tutorial\n\n\n\n\nCongratulations! You‚Äôve successfully set up a Python development environment using uv. This modern setup will serve you well as you progress in your programming journey. Remember that learning to code is a marathon, not a sprint ‚Äì take your time to understand each concept thoroughly.\nHappy coding! üíª‚ú®",
    "crumbs": [
      "Home",
      "Course information",
      "Weekly Overview"
    ]
  },
  {
    "objectID": "semester.html#week-1",
    "href": "semester.html#week-1",
    "title": "Weekly overview",
    "section": "",
    "text": "Welcome to this guide on setting up your Python development environment using the powerful package manager called uv.\nA properly configured development environment is crucial for efficient coding. It helps manage dependencies, keeps your projects organized, and provides powerful tools that make coding easier and more enjoyable. The uv package manager we‚Äôll be using is a modern, fast alternative to traditional Python package managers.\n\n\nThe GitHub Student Developer Pack provides students with free access to the best developer tools.\n\nVisit GitHub Student Developer Pack\nClick on ‚ÄúGet your pack‚Äù\nSign in with your GitHub account (or create one if you don‚Äôt have it)\nVerify your student status using your school-issued email\nComplete the application form\nWait for approval (usually takes 1-7 days)\n\nWhy this matters: The pack includes free access to GitHub Copilot, which is an AI pair programmer that will help you write better code faster.\n\n\n\nVS Code is a lightweight but powerful source code editor.\n\nGo to VS Code download page\nDownload the appropriate version for your operating system\nRun the installer and follow the on-screen instructions\nLaunch VS Code after installation\n\n\n\n\n\n\n\nPro Tip for Microsoft\n\n\n\n\n\nDuring installation on Windows, check the options ‚ÄúAdd ‚ÄòOpen with Code‚Äô action to Windows Explorer file context menu‚Äù and ‚ÄúAdd ‚ÄòOpen with Code‚Äô action to Windows Explorer directory context menu‚Äù for easier access.\n\n\n\nAdding VS Code to PATH (Command Line Access)\nTo be able to open VS Code from the command line interface using code . command:\nFor Windows: 1. Open VS Code 2. Press Ctrl+Shift+P to open the Command Palette 3. Type ‚Äúshell command‚Äù and select ‚ÄúShell Command: Install ‚Äòcode‚Äô command in PATH‚Äù 4. Restart your terminal for changes to take effect\nFor macOS: 1. Open VS Code 2. Press Cmd+Shift+P to open the Command Palette 3. Type ‚Äúshell command‚Äù and select ‚ÄúShell Command: Install ‚Äòcode‚Äô command in PATH‚Äù 4. Restart your terminal for changes to take effect\n\n\n\nExtensions enhance VS Code with additional features. We‚Äôll install three key extensions.\nIn VS Code, click on the Extensions icon in the sidebar (or press: Windows Ctrl+Shift+X / mac: Cmd+Shift+X).\nPython Extension\n\nSearch for ‚ÄúPython‚Äù\nFind the extension by Microsoft (usually the first result)\nClick ‚ÄúInstall‚Äù\n\nGitHub Copilot\n1. Search for ‚ÄúGitHub Copilot‚Äù in the Extensions marketplace 2. Click ‚ÄúInstall‚Äù 3. After installation, sign in with your GitHub account using the account icon in the lower left sidebar 4. You‚Äôll be prompted to authorize VS Code to use GitHub Copilot\nGitHub Copilot Chat\n1. Search for ‚ÄúGitHub Copilot Chat‚Äù in the Extensions marketplace 2. Click ‚ÄúInstall‚Äù 3. This extension works alongside GitHub Copilot to provide conversational AI assistance\n\n\n\n\n\n\nNote: GitHub Copilot requires a subscription, but it‚Äôs free with the GitHub Student Developer Pack you applied for in Step 1.\n\n\n\n\n\n\nuv is a fast, modern Python package manager and resolver.\nFor Windows (PowerShell):\n\nOpen PowerShell\nRun the following command:\n\npowershell -ExecutionPolicy ByPass -c \"irm https://astral.sh/uv/install.ps1 | iex\"\n\nRestart your PowerShell session to ensure uv is in your PATH\n\nFor macOS/Linux (Terminal):*\n\nOpen Terminal\nRun the following command:\n\ncurl -LsSf https://astral.sh/uv/install.sh | sh\nIf your system doesn‚Äôt have curl, you can use wget:\nwget -qO- https://astral.sh/uv/install.sh | sh\n\nClose and reopen your terminal to ensure uv is in your PATH\n\nVerify installation: Type uv --version in your command line interface. You should see the version number of uv displayed.\n\n\n\nNow let‚Äôs create a new Python project structure using uv:\n\nOpen your command line interface (PowerShell on Windows or Terminal on Mac/Linux)\nSimply type the following command directly in your command line or first navigate to the directory where you want to create your project (e.g., cd Documents)\nRun the following command to initialize a new project named ‚Äúgenai-app‚Äù with Python 3.11:\n\nuv init genai-app --python 3.11\n\n\n\n\n\n\nWhat this does\n\n\n\n\n\n\nCreates a new directory called genai-app\nSets up a project structure with Python 3.11\nCreates initial configuration files\n\n\n\n\n\n\n\nLet‚Äôs move into your newly created project directory:\ncd genai-app\nCheck the directory contents: You can use dir (Windows) or ls (macOS/Linux) to see what files were created.\n\n\n\nA virtual environment is an isolated space where you can install packages without affecting your global Python installation. We can create and activate this environment with:\nuv sync\n\n\n\n\n\n\nWhat this does\n\n\n\n\n\n\nCreates a virtual environment for your project\nSets up the environment based on your project‚Äôs specifications\nThis environment is isolated from your system Python installation\n\n\n\n\nLet‚Äôs execute the example Python file main.py to make sure everything is working:\npython3 main.py\nYou should see a ‚ÄúHello, world‚Äù message.\n\n\n\nLet‚Äôs add some commonly used packages for AI and data science projects:\nuv add pandas python-dotenv openai gradio streamlit\n\n\n\n\n\n\nWhat these packages do\n\n\n\n\n\n\npandas: A beginner-friendly library that helps you work with data tables (like Excel spreadsheets)\npython-dotenv: Helps keep your passwords and API keys safe by storing them in a separate file\nopenai: Connects your code to AI services like ChatGPT\ngradio: Creates simple web interfaces for your AI projects with minimal coding\nstreamlit: Turns your Python scripts into interactive web apps with just a few lines of code\n\n\n\n\n\n\n\nNow let‚Äôs open your new project in VS Code where we‚Äôll write our code:\ncode .\nThis command tells your computer to open VS Code in your current folder (the . means ‚Äúhere‚Äù).\nIf this command doesn‚Äôt work, don‚Äôt worry! You can also: 1. Open VS Code manually 2. Click on ‚ÄúFile‚Äù in the top menu 3. Select ‚ÄúOpen Folder‚Ä¶‚Äù 4. Find and select your genai-app folder\n\n\n\nLet‚Äôs make sure everything is working by running the example file:\npython3 main.py\nYou should see a ‚ÄúHello, world!‚Äù message appear. This confirms that: 1. Your Python is working correctly 2. Your virtual environment is active 3. You‚Äôre ready to start coding!\n\n\n\nPackage Installation Problems\nIf you see errors when adding packages: 1. Check that you‚Äôre connected to the internet 2. Try running uv sync again to refresh your environment 3. Read the error message carefully - it often tells you exactly what went wrong\n‚ÄúCommand Not Found‚Äù Error\nIf your computer can‚Äôt find the uv command: 1. Close your terminal completely and open a new one 2. If that doesn‚Äôt work, you might need to add uv to your PATH (the list of places your computer looks for programs) 3. As a last resort, try reinstalling using the commands from Step 4\nVS Code Extensions Not Working\nIf the extensions we installed aren‚Äôt behaving correctly: 1. Make sure you‚Äôve signed in to your GitHub account in VS Code 2. Try updating VS Code to the latest version 3. You can reinstall extensions by uninstalling them first, then installing again\n\n\n\n\nuv Documentation\nVS Code Python Tutorial\n\n\n\n\nCongratulations! You‚Äôve successfully set up a Python development environment using uv. This modern setup will serve you well as you progress in your programming journey. Remember that learning to code is a marathon, not a sprint ‚Äì take your time to understand each concept thoroughly.\nHappy coding! üíª‚ú®",
    "crumbs": [
      "Home",
      "Course information",
      "Weekly Overview"
    ]
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Online Marketing 2",
    "section": "",
    "text": "This page contains an outline of the topics and content for the course.\n\n\n\n\n\n\nThis schedule will be updated as the semester progresses.\n\n\n\n\n\n\nNr\nTopic\nMaterial\nMore resources\n\n\n\n\n\nIntroduction\n\n\n\n\n1\nProject introduction\nüìë\n\n\n\n2\nGenerative AI\nüñ•Ô∏è Slides\n\n\n\n3\nLarge Language Models\nüñ•Ô∏è Slides\n\n\n\n4\nProgramming toolkit lab\nüíª Online-Book",
    "crumbs": [
      "Home",
      "Course information",
      "Semester Overview"
    ]
  }
]